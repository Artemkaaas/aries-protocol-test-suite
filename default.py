"""Default implementations."""
import json

from protocol_tests.backchannel import (
    Backchannel, SubjectConnectionInfo
)
from protocol_tests.connection.backchannel import ConnectionsBackchannel


def pause():
    """Pause for input before continuing."""
    input('Press ENTER to continue.')


class ManualBackchannel(Backchannel, ConnectionsBackchannel):
    """
    Manually complete backchannel actions by copying and pasting values between
    subject and terminal.
    """
    async def setup(self, config, suite):
        pass

    async def reset(self):
        print('Reset test subject to clean state.')
        pause()

    async def new_connection(self, info, parameters=None):
        print(
            'Enter the following info into your agent '
            'to create a new connection:\n'
        )
        print('DID: {}\nVerkey: {}\nLabel: {}\nEndpoint: {}\n'.format(
            info.did, info.verkey, info.label, info.endpoint
        ))
        did = input('Input connection DID generated by test subject: ')
        recipients = input(
            'Input recipients as comma-separated, base58-encoded values: '
        )
        recipients = map(lambda recip: recip.strip(), recipients.split(','))
        recipients = list(filter(lambda recip: recip, recipients))
        routing_keys = input(
            'Input routing keys as comma-separated, base58-encoded values'
            ' (hit ENTER for none): '
        )
        routing_keys = map(
            lambda recip: recip.strip(), routing_keys.split(',')
        )
        routing_keys = list(filter(lambda recip: recip, routing_keys))
        endpoint = input('Input connection endpoint: ')

        return SubjectConnectionInfo(did, recipients, routing_keys, endpoint)

    async def connections_v1_0_inviter_start(self) -> str:
        print('Generate a new invitation on test subject.')
        return input('Enter invitation URL: ')

    async def connections_v1_0_invitee_start(self, invite):
        print('Paste the following invitation into the test subject.')
        print('Generated invitation: ', invite)
        pause()

    async def discover_features_v1_0_requester_start(self, verkey, query=".*", comment=None):
        """Start discover-features protocol from the requester role."""
        print("Send Disclose Query: " + query)
        pause()
        return

    async def trust_ping_v1_0_send_ping(self, conn):
        """Send a trustping to the specified connection."""
        print("Send Trust Ping")
        pause()
        return

    async def issue_credential_v1_0_issuer_send_cred_offer(self, conn, attrs) -> str:
        print("Send Credential Offer")
        pause()
        return ''

    async def issue_credential_v1_0_holder_accept_cred_offer(self, id: str):
        print("Accept Credential Offer")
        pause()
        return

    async def present_proof_v1_0_verifier_send_proof_request(self, connection, proof_request) -> str:
        """
        The agent under test sends a proof request and returns the thread ID.
        """
        print("Send Presentation Request: " + json.dumps(proof_request))
        pause()
        return ''

    async def present_proof_v1_0_prover_send_proof(self, id: str):
        """
        The agent under test sends a proof request and returns the thread ID.
        """
        print("Wait for Proof")
        pause()
        return

    async def present_proof_v1_0_verifier_verify_proof(self, id: str) -> dict:
        """
        The agent under test verifies a proof and returns the attributes and their values.
        """
        print("Verify Proof")
        return {}
